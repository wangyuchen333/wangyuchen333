name: generate animation

on:
  schedule: [{cron: "0 * * * *"}]
  workflow_dispatch:
  push: {branches: ["master", "main"]} 

jobs:
  generate:
    permissions: 
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check and create dist directory
        run: |
          if [ ! -d dist ]; then
            mkdir dist
          fi

      - name: generate-snake-game-from-github-contribution-grid
        uses: Platane/snk@v3.3.0
        with:
          # github user name to read the contribution graph from (**required**)
          # using action context var `github.repository_owner` or specified user
          github_user_name: ${{ github.repository_owner }}
      
          # list of files to generate.
          # one file per line. Each output can be customized with options as query string.
          #
          #  supported options:
          #  - palette:     A preset of color, one of [github, github-dark, github-light]
          #  - color_snake: Color of the snake
          #  - color_dots:  Coma separated list of dots color.
          #                 The first one is 0 contribution, then it goes from the low contribution to the highest.
          #                 Exactly 5 colors are expected.
          outputs: |
            dist/github-snake.svg
            dist/github-snake-dark.svg?palette=github-dark
            dist/ocean.gif?color_snake=orange&color_dots=#bfd6f6,#8dbdff,#64a1f4,#4b91f1,#3c7dd9

      # - name: generate github-contribution-grid-snake.svg
      #   uses: Platane/snk/svg-only@v3
      #   with:
      #     github_user_name: ${{ github.repository_owner }}
      #     outputs: |
      #       github-contribution-grid-snake.svg
      #       github-contribution-grid-snake-dark.svg?palette=github-dark

      - name: List files
        run: ls -R

      - name: push github-contribution-grid-snake.svg to the output branch
        uses: crazy-max/ghaction-github-pages@v4.2.0
        with:
          target_branch: output
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Cache
      #   uses: actions/cache@v4.2.3
      #   with:
      #     # A list of files, directories, and wildcard patterns to cache and restore
      #     path: 
      #     # An explicit key for restoring and saving the cache
      #     key: 
      #     # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
      #     restore-keys: # optional
      #     # The chunk size used to split up large files during upload, in bytes
      #     upload-chunk-size: # optional
      #     # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
      #     enableCrossOsArchive: # optional, default is false
      #     # Fail the workflow if cache entry is not found
      #     fail-on-cache-miss: # optional, default is false
      #     # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
      #     lookup-only: # optional, default is false
      #     # Run the post step to save the cache even if another step before fails
      #     save-always: # optional, default is false
                
